<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thoughts about ML</title><link href="https://arthurlu.github.io/" rel="alternate"></link><link href="https://arthurlu.github.io/feeds/all.atom.xml" rel="self"></link><id>https://arthurlu.github.io/</id><updated>2017-02-26T10:00:00+08:00</updated><entry><title>5th Week</title><link href="https://arthurlu.github.io/5th-week.html" rel="alternate"></link><published>2017-02-26T10:00:00+08:00</published><updated>2017-02-26T10:00:00+08:00</updated><author><name>YungChun</name></author><id>tag:arthurlu.github.io,2017-02-26:5th-week.html</id><summary type="html">&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this week, I learned a concept of how to find an optimal soulution of search problem when the search space is too large. This technique is called Simulated Annealign. Prof. Thad used a classic optimization problem, Traveling Salesman Problem(TSP), to demonstrate the power of Simulated Annealing. Briefly, TSP is a problem that seeks to find the shortest path passing through every city exactly once.&lt;/p&gt;
&lt;h2&gt;What is Simulated Annealing&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Simulated Annealing" src="/images/SA_animation.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Simulated Annealing is a probablistic technique used for finding an approximate solution to an optimization problem. The main concept behind it is that we don't always used the positive gradient to determine next action instead adding some randomness. Randomness could help escaping from local optimal states and finding the global optimal one. &lt;/p&gt;
&lt;p&gt;Image Source: &lt;a href="https://commons.wikimedia.org/wiki/File:Hill_Climbing_with_Simulated_Annealing.gif"&gt;Simulated Annealing - By Kingpin13 (Own work) [CC0], via Wikimedia Commons (Attribution not required)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;How to implement Simulated Annealing&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ArthurLu/AIND-Simulated_Annealing"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are couple important notes to be considered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number of cities is not related to the result, because they all could find the best order of traveling.&lt;/li&gt;
&lt;li&gt;For alpha, lower alpha would get worst result because alpha control the speed of decaying, lower alpha results in steady state faster. But above a threshold, the alpha would be irrelavant.&lt;/li&gt;
&lt;li&gt;For temperature, higher temperature would get better result more likely, because higher temperature means more posibilities of jumping from different states.&lt;/li&gt;
&lt;li&gt;Logistic decay has higher decaying rate than exponential decay. When the number of cities is small, logistic decay is effective to find the best path, but when the number of cities is higher, it fails.&lt;/li&gt;
&lt;li&gt;By using permutations to generate successors, we could end up getting better result, because successors have more combinations than before. But the search space greatly increase, it cause higher computation.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Udacity"></category><category term="AI"></category></entry></feed>